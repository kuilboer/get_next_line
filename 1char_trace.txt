filedata: 
"0"
   |
   |
   V
get_next_line(filedata)
{
	initialize_variables()
	{
		*next_line = NULL;
		if (!stb->initialized || stb->flag_eof || stb->flag_err) == TRUE
		{
			*stb = (t_state){0};
			stb->buff_siz = BUFFER_SIZE;
			stb->initialized = 1;
		}
		stb->nxln_siz = 1;
		init_next_line()
		{
			*nxln = malloc(sizeof(char) * (stb->nxln_siz + 1)); == 2 Bytes
			if (!*nxln) == FALSE
			ft_memset(*nxln, 0, stb->nxln_siz + 1); == 2 Bytes zeroed out
		}
		stb->i_nxl = 0;
		stb->flag_eol = 0;
		return (1);	
	}
	// LOOP 0
	while (!(stb[fd].flag_eof || stb[fd].flag_err || stb[fd].flag_eol)) == TRUE
	{
		read_next_line_from_buffer()
		{
			while (stb->i_buf < stb->buff_siz && stb->buffer[stb->i_buf] && stb->i_nxl < stb->nxln_siz)
			      (	  0 < 1 == TRUE           && stb->buffer[0] == FALSE &&      0 < 1 == TRUE        ) == FALSE
			if (!stb->buffer[stb->i_buf]) == TRUE
				stb->flag_eob = 1;
			if (stb->i_nxl >= stb->nxln_siz) == FALSE
			(*nxln)[stb->i_nxl] == (*nxln)[0] = '\0';
			return ;
		}
		if (stb[fd].flag_eonl) == FALSE;
		if (stb[fd].flag_eob) == TRUE
			if (!read_buffer_from_file_descriptor(fd, &stb[fd])) == FALSE
				{
					ft_memset(stb->buffer, 0, stb->buff_siz + 1) == ft_memset(stb->buffer, 0, 2) == 2 Bytes zeroed out
					result = read(fd, stb->buffer, stb->buff_siz) == (3, stb->buffer, 1) == 1
					if (result == -1) == FALSE
					else if (result == 0) == FALSE
					else == TRUE
					{
						stb->buffer[result] = '\0' == stb->buffer[1] = '\0';
						stb->flag_eob = 0;
						stb->i_buf = 0;
					}
					// stb->buffer == { "0", '\0' }
					return (1);
				}
		if (stb[fd].flag_eof && stb[fd].i_nxl == 0) == FALSE
	}
	// LOOP 1
	while (!(stb[fd].flag_eof == 0 || stb[fd].flag_err == 0 || stb[fd].flag_eol == 0)) == TRUE
	{
		read_next_line_from_buffer()
		{
			while (stb->i_buf < stb->buff_siz && stb->buffer[stb->i_buf] && stb->i_nxl < stb->nxln_siz)
			      (         0 < 1		  && stb->buffer[0] == TRUE  &&          0 < 1            ) == TRUE
			{
				(*nxln)[stb->i_nxl] = stb->buffer[stb->i_buf] == (*nxln)[0] = stb->buffer[0] = "0";
				if (stb->buffer[stb->i_buf] == '\n') == FALSE
				stb->i_buf++ == stb->i_buf = 1;
				stb->i_nxl++ == stb->i_nxl = 1;
			}
			if (!stb->buffer[stb->i_buf])
			   ( stb->buffer[1] == '\0' ) == TRUE
				stb->flag_eob = 1;
			if (stb->i_nxl >= stb->nxln_siz)
			(stb->i_nxl == 1 >= stb->nxln_size == 1) == TRUE
				stb->flag_eonl = 1;
			(*nxln)[stb->i_nxl] = '\0' == (*nxln)[1] = '\0';
			// next_line == { "0", '\0' }
			return ;
		}
		if (stb[fd].flag_eonl) == (stb[3].flag_eonl == 1) == TRUE
			if (!init_next_line(&next_line, &stb[fd])) == FALSE
				{
					char	*tmp;
					size_t	nxln_old_sz;

					if (!*nxln) == FALSE
					else == TRUE
					{
						nxln_old_sz = stb->nxln_siz == 1;
						stb->nxln_siz *= 2 == 2;
						tmp = malloc(sizeof(char) * (stb->nxln_siz + 1)) == (1 * 2 + 1 ) == (1 * 3) == 3 Bytes;
						if (!tmp) == FALSE
						ft_memset(tmp, 0, stb->nxln_siz + 1) == (tmp, 0 , 2 + 1) == (tmp, 0, 3) == 3 Bytes zeroedout;
						ft_memcpy(tmp, *nxln, nxln_old_sz) == (tmp, *nxln, 2) == 2 Bytes copied
						// *tmp == { "0", '\0' };
						free(*nxln);
						*nxln = tmp;
						// *nxln == { "0", '\0' }
						stb->flag_eonl = 0;
					}
					return (1);
				}
		if (stb[fd].flag_eob)
			if (!read_buffer_from_file_descriptor(fd, &stb[fd])) == FALSE
				{
					int	result;

					ft_memset(stb->buffer, 0, stb->buff_siz + 1) == ft_memset(stb->buffer, 0, 2) == 2 Bytes zeroed out
					result = read(fd, stb->buffer, stb->buff_siz) == (3, stb->buffer, 1) == 0
					if (result == -1) == FALSE
					else if (result == 0) == TRUE
					{
						stb->flag_eof = 1;
					}
					else == FALSE
					return (1);
				}
	}
	// LOOP 2
	while (!(stb[fd].flag_eof      || stb[fd].flag_err == 0 || stb[fd].flag_eol == 0))
	       !(stb[fd].flag_eof == 1 || stb[fd].flag_err == 0 || stb[fd].flag_eol == 0)  == FALSE
	if (stb[fd].flag_eof && stb[fd].i_nxl == 0)
	   (stb[3].flag_eof == 1 && (stb[3].i_nxl == 1) == FALSE
	return (next_line) == Return { "0", '\0' };
}
